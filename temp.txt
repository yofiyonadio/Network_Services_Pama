'use strict';

var response = require('./res');
var connection = require('./conn');
var jwt = require('jsonwebtoken');
var moment = require('moment');
var nodemailer = require('nodemailer');

exports.get = function (req, res) {
    connection.query('SELECT * FROM guest.users', function (error, rows, fields) {
        if (error) {
            console.log(error)
        } else {
            response.ok(rows.recordset, res)
        }
    });
};

exports.post = function (req, res) {
    var token = req.headers.token;
    var datas = JSON.parse(req.body.datas);


    jwt.verify(token, 'cGFtYTcxMzM=', function (err, decoded) {
        if (err) {
            response.ok('Auth gagal!', res);
        } else {

            /*
            if (postApi(datas)) {
                response.ok("Query bermasalah!", res);
            } else {
                response.ok("Post Berhasil !", res);
            }
            */
            postApi(datas).then(result => {
                response.ok(result, res);
                checkUpdate();

            }).catch(err => {
                response.ok(err.message, res);
            });
        }
    });
};



/*

function (error, rows, fields) {
                    if (error) {
                        console.log(error)
                    } else {
                        response.ok("Post Berhasil !", res);
                    }
                }


*/

//------------------------------------------------------------------------------------------------------------------

function sendMail(exports) {
    var val = exports;
    var ids = val['ids'];
    var title = val['title'];
    var old_value = val['old_value'];
    var new_value = val['new_value'];
    var kolom = val['kolom'];
    var gmail = "cis.pamapersada@gmail.com";
    var timestamps = moment().format('DD/MM/YYYY HH:mm');
    var transporter = nodemailer.createTransport({
        host: "smtp.gmail.com",
        secureConnection: true,
        port: 465,
        transportMethod: "SMTP",
        auth: {
            user: gmail,
            pass: "mazmur5015"
        }
    });

    var text = `Tanggal: ${timestamps} \n\nID: ${ids} \nTitle: ${title} \nColumn: ${kolom} \n\nNEW VALUE: \n${new_value} \n\nOLD Value: \n${old_value}`;

    var mailOptions = {
        from: gmail,
        to: 'yofiyonadio2@gmail.com',
        subject: `(Office 365) Terjadi perubahan data ${title} pada kolom ${kolom}`,
        text: text
    };


    transporter.sendMail(mailOptions, function (error, info) {
        if (error) {
            console.log(error);
        } else {
            console.log('Email sent: ' + info.response);
        }
    });


    console.log(text);
}

//------------------------------------------------------------------------------------------------------------------

function checkUpdate() {
    var query = `select * from guest.update_365 t where t.send = 0;`
    connection.query(query, function (error, rows, fields) {
        if (error) {
            console.log(error);
        } else {
            var result = rows.recordset;
            if (result.length > 0) {
                sendUpdate(result);
            }

        }
    });
}

//------------------------------------------------------------------------------------------------------------------

function sendUpdate(result) {

    for (const type of result) {
        var res = type;
        var id = res['id'];
        var ids = res['ids'];
        var title = res['title'];
        var old_value = res['old_value'];
        var new_value = res['new_value'];
        var kolom = res['kolom'];
        var exports = {
            ids: ids,
            title: title,
            old_value: old_value,
            new_value: new_value,
            kolom: kolom
        };


        var query = `UPDATE guest.update_365 set send = 1 where id = ${id}`;
        connection.query(query, function (error, rows, fields) {
            if (error) {
                console.log(error);
            } else {
                if (result.length > 0) {
                    sendMail(exports);
                    //console.log(`berhasil`);
                }

            }
        });
        //sendMail();
        //console.log(`A JavaScript type is: ${query}`);
    }

}





//------------------------------------------------------------------------------------------------------------------


function postApi(datas) {
    return new Promise((resolve, reject) => {


        for (const i in datas) {

            if (i > 0) {

                var _datas = datas[i];

                var ids = _datas[0];
                var category = _datas[1];
                var er = _datas[2];
                var addresses = _datas[3];
                var ports = _datas[4];
                var title = _datas[5];
                var last_update = _datas[6];
                var status = '';
                var timeupdate = '';

                var timestamps = moment().format('YYYY-MM-DD HH:mm:ss');

                //DECLARE @timeupdate VARCHAR(50) = (SELECT timeupdate FROM guest.microsoft_365 WHERE ids = '${ids}' AND title = '${title}');
                //DECLARE @oldtime VARCHAR(50) = (SELECT timeupdate FROM guest.microsoft_365 WHERE ids = '${ids}' AND title = '${title}');
                //DECLARE @timediff VARCHAR(50) = (SELECT DATEDIFF(SECOND, (CASE WHEN ISDATE(@oldtime) = 1 THEN @oldtime ELSE '${timestamps}'; END), '${timestamps}'));

                /*
                IF @timediff >= 100 OR @timediff = 0
                BEGIN
                SET @status = '';
                SET @timeupdate = '';
                END;
                */

                /*
                IF (@category != '${category}' OR @addresses != '${addresses}' OR @ports != '${ports}' OR @er != '${er}')
                BEGIN
                SET @timeupdate = '${timestamps}';
                END;
                
                ELSE
                BEGIN
                END;
                */

                var query = `
            DECLARE @category VARCHAR (1000) = (SELECT category FROM guest.microsoft_365 WHERE ids = '${ids}' AND title = '${title}');
            DECLARE @addresses VARCHAR (MAX) = (SELECT addresses FROM guest.microsoft_365 WHERE ids = '${ids}' AND title = '${title}');
            DECLARE @ports VARCHAR (50) = (SELECT ports FROM guest.microsoft_365 WHERE ids = '${ids}' AND title = '${title}');
            DECLARE @er VARCHAR (20) = (SELECT er FROM guest.microsoft_365 WHERE ids = '${ids}' AND title = '${title}');
            DECLARE @status VARCHAR (1000) = '';
            DECLARE @statusjoin VARCHAR (1000) = '';

            IF (@category != '${category}')
            BEGIN
            INSERT INTO guest.update_365 (ids, title, old_value, new_value, kolom, timestamps)
            VALUES (${ids}, '${title}', @category, '${category}', 'category', '${timestamps}');

            IF (LEN(@status) > 1)
            SET @status = @status + ', category';
            ELSE
            SET @status = 'category';
            END;

            IF (@addresses != '${addresses}')
            BEGIN
            INSERT INTO guest.update_365 (ids, title, old_value, new_value, kolom, timestamps)
            VALUES (${ids}, '${title}', @addresses, '${addresses}', 'addresses', '${timestamps}');

            IF (LEN(@status) > 1)
            SET @status = @status + ', addresses';
            ELSE
            SET @status = 'addresses';
            END;

            IF (@ports != '${ports}')
            BEGIN
            INSERT INTO guest.update_365 (ids, title, old_value, new_value, kolom, timestamps)
            VALUES (${ids}, '${title}', @ports, '${ports}', 'ports', '${timestamps}');

            IF (LEN(@status) > 1)
            SET @status = @status + ', ports';
            ELSE
            SET @status = 'ports';
            END;

            IF (@er != '${er}')
            BEGIN
            INSERT INTO guest.update_365 (ids, title, old_value, new_value, kolom, timestamps)
            VALUES (${ids}, '${title}', @er, '${er}', 'er', '${timestamps}');

            IF (LEN(@status) > 1)
            SET @status = @status + ', er';
            ELSE
            SET @status = 'er';
            END;

            MERGE INTO guest.microsoft_365 AS t
            USING
            (SELECT ids = ${ids}, title = '${title}', category = '${category}', er = '${er}', addresses = '${addresses}',
            ports = '${ports}', last_update = '${last_update}', timestamps = '${timestamps}') AS s

            ON t.ids = s.ids AND t.title = s.title

            WHEN MATCHED THEN

            UPDATE SET ids = s.ids, title = s.title, category = s.category, er = s.er, addresses = s.addresses,
            ports = s.ports, last_update = s.last_update, timestamps = s.timestamps

            WHEN NOT MATCHED THEN

            INSERT (ids, title, category, er, addresses, ports, last_update, timestamps)
            VALUES (s.ids, s.title, s.category, s.er, s.addresses, s.ports, s.last_update, s.timestamps);
            `;

                connection.query(query, function (error, rows, fields) {
                    if (error) {
                        reject(error);
                    } else {
                        resolve("Post Berhasil");
                    }
                });
            }
        };
    });
}


//------------------------------------------------------------------------------------------------------------------


exports.index = function (req, res) {
    response.ok("Hello Pama Persada, This is a Microsoft 365 Rest Api", res)
};

exports.token = function (req, res) {
    var token = jwt.sign({ name: 'Pama Persada' }, 'cGFtYTcxMzM=', {
        //expiresIn: 60 // token kadaluwarsa (Detik)
    });
    response.ok(token, res);
};

exports.auth = function (req, res) {
    var token = req.headers.token;

    jwt.verify(token, 'cGFtYTcxMzM=', function (err, decoded) {
        if (err) {
            response.ok('Auth gagal!', res);
        } else {
            response.ok('Auth OK!', res);
        }
    });


};